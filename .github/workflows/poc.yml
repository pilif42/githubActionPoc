name: Deploy TsAndCs

on:
  push:
    branches:
      - main

jobs:
  prepareHtmlFile:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - run: |
          mkdir -p forThePortal
      - uses: docker://pandoc/latex:2.9
        with:
          args: --from markdown --to html5 --css omse.css --output=forThePortal/termsAndConditions.html termsAndConditions.md
      # The next step is no more required as we now push to GitHub the .html file.
      - uses: actions/upload-artifact@master
        with:
          name: termsAndConditions
          path: forThePortal/termsAndConditions.html
          retention-days: 1
      - uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN  }}'
          BRANCH_NAME: 'main'

  # In uploadHtmlFile, we use secrets that have been defined per environment at https://github.com/pilif42/githubActionPoc/settings/secrets/actions
  # Here, we are targeting the dev environment (see name: dev).
  # As we now push to GitHub the .html file, this whole job can be removed.
#  uploadHtmlFile:
#    needs: prepareHtmlFile
#    environment:
#      name: dev
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/download-artifact@v2
#        with:
#          name: termsAndConditions
#  #      - uses: appleboy/scp-action@master
#  #        with:
#  #          host: ${{ secrets.TSANDCS_HOST }}
#  #          username: ${{ secrets.TSANDCS_SSH_USER }}
#  #          port: ${{ secrets.PORT }}
#  #          key: ${{ secrets.KEY }}
#  #          source: "termsAndConditions.html"
#  #          target: "termsAndConditions.html"

  tagAndRelease:
    needs: prepareHtmlFile
    environment:
      name: dev
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
          tag_prefix: v
          create_annotated_tag: false
          default_bump: false
          dry_run: false
      - name: Create a GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: 'TBC steps.tag_version.outputs.changelog'
      # The next 2 steps are no more required as we will use the GitHub API to work out the latest version. See README.md.
      - shell: bash
        run: |
          echo ${{ steps.tag_version.outputs.new_tag }} > version.txt
      - uses: actions/upload-artifact@v2
        with:
          name: version
          path: version.txt
          retention-days: 1

# The next job is not required as we can use the GitHub API to work out the latest version. See README.md.
#  uploadVersionFile:
#    needs: tagAndRelease
#    environment:
#      name: dev
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/download-artifact@v2
#        with:
#          name: version
#  #      - uses: appleboy/scp-action@master
#  #        with:
#  #          host: ${{ secrets.TSANDCS_HOST }}
#  #          username: ${{ secrets.TSANDCS_SSH_USER }}
#  #          port: ${{ secrets.PORT }}
#  #          key: ${{ secrets.KEY }}
#  #          source: "version.txt"
#  #          target: "version.txt"
